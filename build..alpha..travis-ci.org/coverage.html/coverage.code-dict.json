{"/home/travis/build/npmtest/node-npmtest-ember-youtube/test.js":"/* istanbul instrument in package npmtest_ember_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/lib.npmtest_ember_youtube.js":"/* istanbul instrument in package npmtest_ember_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_youtube = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_youtube = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-youtube && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_youtube\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_youtube.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_youtube.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_youtube.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_youtube.__dirname + '/lib.npmtest_ember_youtube.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/node_modules/ember-youtube/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-youtube'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/node_modules/ember-youtube/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/node_modules/ember-youtube/addon/components/ember-youtube.js":"/* global YT, window */\n\nimport Ember from 'ember';\n\nconst {computed, debug, observer, on, run, RSVP, $} = Ember;\n\nexport default Ember.Component.extend({\n\tclassNames: ['EmberYoutube'],\n\tytid: null,\n\twidth: 560,\n\theight: 315,\n\n\t// These options are used to load a video.\n\tstartSeconds: undefined,\n\tendSeconds: undefined,\n\tsuggestedQuality: undefined,\n\n\tlazyload: false,\n\tshowControls: false,\n\tshowDebug: false,\n\tshowProgress: false,\n\tshowExtras: computed.or('showControls', 'showProgress', 'showDebug'),\n\n\tplayer: null,\n\tplayerState: 'loading',\n\t// YouTube's embedded player can take a number of optional parameters.\n\t// https://developers.google.com/youtube/player_parameters#Parameters\n\t// https://developers.google.com/youtube/youtube_player_demo\n\tplayerVars: {},\n\n\t// from YT.PlayerState\n\tstateNames: {\n\t\t'-1': 'ready',\t\t// READY\n\t\t0: 'ended', \t\t// YT.Player.ENDED\n\t\t1: 'playing', \t\t// YT.PlayerState.PLAYING\n\t\t2: 'paused', \t\t// YT.PlayerState.PAUSED\n\t\t3: 'buffering', \t// YT.PlayerState.BUFFERING\n\t\t5: 'queued'\t\t\t// YT.PlayerState.CUED\n\t},\n\n\t// Expose the component to the outside world.\n\t_register: on('init', function () {\n\t\tconst delegate = this.get('delegate');\n\t\tconst delegateAs = this.get('delegate-as');\n\t\trun.schedule('afterRender', () => {\n\t\t\tif (!delegate) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdelegate.set(delegateAs || 'emberYouTube', this);\n\t\t});\n\t}),\n\n\tdidInsertElement() {\n\t\tthis._super(...arguments);\n\t\tif (!this.get('lazyload') && this.get('ytid')) {\n\t\t\t// If \"lazyload\" is not enabled and we have an ID, we can start immediately.\n\t\t\t// Otherwise the `loadVideo` observer will take care of things.\n\t\t\tthis.loadAndCreatePlayer().then(() => {\n\t\t\t\tthis.loadVideo();\n\t\t\t});\n\t\t}\n\t},\n\n\tloadAndCreatePlayerIsRunning: false,\n\tloadAndCreatePlayer() {\n\t\tlet isRunning = this.get('loadAndCreatePlayerIsRunning');\n\t\tif (isRunning) {\n\t\t\t// some ember-concurrency would be nice here\n\t\t\treturn;\n\t\t}\n\t\tthis.set('loadAndCreatePlayerIsRunning', true);\n\t\tconst promise = new RSVP.Promise((resolve, reject) => {\n\t\t\tthis.loadYouTubeApi().then(() => {\n\t\t\t\tthis.createPlayer().then(player => {\n\t\t\t\t\tthis.setProperties({\n\t\t\t\t\t\tplayer,\n\t\t\t\t\t\tplayerState: 'ready'\n\t\t\t\t\t});\n\t\t\t\t\tthis.set('loadAndCreatePlayerIsRunning', false);\n\t\t\t\t\tresolve();\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (this.get('showDebug')) {\n\t\t\t\t\t\tEmber.debug(err);\n\t\t\t\t\t}\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t// The `wait` helper waits for this run loop,\n\t\t// but not the above promise, which is what i want.\n\t\tif (Ember.testing) {\n\t\t\trun.later(() => {}, 5000);\n\t\t}\n\t\treturn promise;\n\t},\n\n\t// A promise that is resolved when window.onYouTubeIframeAPIReady is called.\n\t// The promise is resolved with a reference to window.YT object.\n\tloadYouTubeApi() {\n\t\treturn new RSVP.Promise((resolve) => {\n\t\t\tlet previous;\n\t\t\tprevious = window.onYouTubeIframeAPIReady;\n\n\t\t\t// The API will call this function when page has finished downloading\n\t\t\t// the JavaScript for the player API.\n\t\t\twindow.onYouTubeIframeAPIReady = () => {\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious();\n\t\t\t\t}\n\t\t\t\tresolve(window.YT);\n\t\t\t};\n\n\t\t\tif (window.YT && window.YT.loaded) {\n\t\t\t\t// If already loaded, make sure not to load the script again.\n\t\t\t\tresolve(window.YT);\n\t\t\t} else {\n\t\t\t\t$.getScript('https://www.youtube.com/iframe_api');\n\t\t\t}\n\t\t});\n\t},\n\n\t// A promise that is immediately resolved with a YouTube player object.\n\tcreatePlayer() {\n\t\tconst playerVars = this.get('playerVars');\n\t\tconst width = this.get('width');\n\t\tconst height = this.get('height');\n\t\t// const iframe = this.element.querySelector('#EmberYoutube-player');\n\t\tconst iframe = this.$('#EmberYoutube-player');\n\t\tlet player;\n\t\treturn new RSVP.Promise((resolve, reject) => {\n\t\t\tif (!iframe) {\n\t\t\t\treject(`Couldn't find the iframe element to create a YouTube player`);\n\t\t\t}\n\t\t\tplayer = new YT.Player(iframe.get(0), {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tplayerVars,\n\t\t\t\tevents: {\n\t\t\t\t\tonReady() {\n\t\t\t\t\t\tresolve(player);\n\t\t\t\t\t},\n\t\t\t\t\tonStateChange: this.onPlayerStateChange.bind(this),\n\t\t\t\t\tonError: this.onPlayerError.bind(this)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t// Gets called by the YouTube player.\n\tonPlayerStateChange(event) {\n\t\t// Set a readable state name\n\t\tlet state = this.get('stateNames.' + event.data.toString());\n\t\tthis.set('playerState', state);\n\t\tif (this.get('showDebug')) {\n\t\t\tdebug(state);\n\t\t}\n\t\t// send actions outside\n\t\tthis.sendAction(state);\n\t\t// send actions inside\n\t\tthis.send(state);\n\t},\n\n\t// Gets called by the YouTube player.\n\tonPlayerError(event) {\n\t\tlet errorCode = event.data;\n\t\tthis.set('playerState', 'error');\n\t\t// Send the event to the controller\n\t\tthis.sendAction('error', errorCode);\n\t\tif (this.get('showDebug')) {\n\t\t\tdebug('error' + errorCode);\n\t\t}\n\t\t// switch(errorCode) {\n\t\t// \tcase 2:\n\t\t// \t\tdebug('Invalid parameter');\n\t\t// \t\tbreak;\n\t\t// \tcase 100:\n\t\t// \t\tdebug('Not found/private');\n\t\t// \t\tthis.send('playNext');\n\t\t// \t\tbreak;\n\t\t// \tcase 101:\n\t\t// \tcase 150:\n\t\t// \t\tdebug('Embed not allowed');\n\t\t// \t\tthis.send('playNext');\n\t\t// \t\tbreak;\n\t\t// \tdefault:\n\t\t// \t\tbreak;\n\t\t// }\n\t},\n\n\t// Returns a boolean that indicates playback status by looking at the player state.\n\tisPlaying: computed('playerState', {\n\t\tget() {\n\t\t\tconst player = this.get('player');\n\t\t\tif (!player) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn player.getPlayerState() === 1;\n\t\t}\n\t}),\n\n\t// Load (and plays) a video every time ytid changes.\n\tytidDidChange: observer('ytid', function () {\n\t\tconst player = this.get('player');\n\t\tconst ytid = this.get('ytid');\n\n\t\tif (!ytid) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!player) {\n\t\t\tthis.loadAndCreatePlayer().then(() => {\n\t\t\t\tthis.loadVideo();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.loadVideo();\n\t}),\n\n\tloadVideo() {\n\t\tconst player = this.get('player');\n\t\tconst ytid = this.get('ytid');\n\n\t\t// Set parameters for the video to be played.\n\t\tlet options = Ember.getProperties(this, ['startSeconds', 'endSeconds', 'suggestedQuality']);\n\t\toptions.videoId = ytid;\n\t\t// Either load or cue depending on `autoplay`.\n\t\tif (this.playerVars.autoplay) {\n\t\t\tplayer.loadVideoById(options);\n\t\t} else {\n\t\t\tplayer.cueVideoById(options);\n\t\t}\n\t},\n\n\tstartTimer() {\n\t\tconst player = this.get('player');\n\t\tconst interval = 1000;\n\t\t// set initial times\n\t\tthis.setProperties({\n\t\t\tcurrentTime: player.getCurrentTime(),\n\t\t\tduration: player.getDuration()\n\t\t});\n\t\t// stop any previously started timer we forgot to clear\n\t\tthis.stopTimer();\n\t\t// every second update current time\n\t\tlet timer = window.setInterval(() => {\n\t\t\tthis.set('currentTime', player.getCurrentTime());\n\t\t}, interval);\n\t\t// save the timer so we can stop it later\n\t\tthis.set('timer', timer);\n\t},\n\n\tstopTimer() {\n\t\twindow.clearInterval(this.get('timer'));\n\t},\n\n\t// A wrapper around the YouTube method to get current time.\n\tcurrentTime: computed({\n\t\tget() {\n\t\t\tlet player = this.get('player');\n\t\t\tlet value = player ? player.getCurrentTime() : 0;\n\t\t\treturn value;\n\t\t},\n\t\tset(key, value) {\n\t\t\treturn value;\n\t\t}\n\t}),\n\n\t// A wrapper around the YouTube method to get the duration.\n\tduration: computed({\n\t\tget() {\n\t\t\tlet player = this.get('player');\n\t\t\tlet value = player ? player.getDuration() : 0;\n\t\t\treturn value;\n\t\t},\n\t\tset(key, value) {\n\t\t\treturn value;\n\t\t}\n\t}),\n\n\t// A wrapper around the YouTube method to get and set volume.\n\tvolume: computed({\n\t\tget() {\n\t\t\tlet player = this.get('player');\n\t\t\tlet value = player ? player.getVolume() : 0;\n\t\t\treturn value;\n\t\t},\n\t\tset(name, vol) {\n\t\t\tlet player = this.get('player');\n\t\t\t// Clamp between 0 and 100\n\t\t\tif (vol > 100) {\n\t\t\t\tvol = 100;\n\t\t\t} else if (vol < 0) {\n\t\t\t\tvol = 0;\n\t\t\t}\n\t\t\tif (player) {\n\t\t\t\tplayer.setVolume(vol);\n\t\t\t}\n\t\t\treturn vol;\n\t\t}\n\t}),\n\n\t// OK, this is stupid but couldn't access the \"event\" inside\n\t// an ember action so here's a manual click handler instead.\n\tprogressBarClick: on('didInsertElement', function () {\n\t\tlet self = this;\n\t\tthis.$().on('click', 'progress', function (event) {\n\t\t\t// get the x position of the click inside our progress el\n\t\t\tlet x = event.pageX - Ember.$(this).position().left;\n\t\t\t// convert it to a value relative to the duration (max)\n\t\t\tlet clickedValue = x * this.max / this.offsetWidth;\n\t\t\t// 250 = 0.25 seconds into player\n\t\t\tself.send('seekTo', clickedValue);\n\t\t});\n\t}),\n\n\t// clean up when element will be destroyed.\n\twillDestroyElement() {\n\t\t// clear the timer\n\t\tthis.stopTimer();\n\t\t// destroy video player\n\t\tvar player = this.get('player');\n\t\tif (player) {\n\t\t\tplayer.destroy();\n\t\t\tthis.set('player', null);\n\t\t}\n\t},\n\n\tactions: {\n\t\tplay() {\n\t\t\tif (this.get('player')) {\n\t\t\t\tthis.get('player').playVideo();\n\t\t\t}\n\t\t},\n\t\tpause() {\n\t\t\tif (this.get('player')) {\n\t\t\t\tthis.get('player').pauseVideo();\n\t\t\t}\n\t\t},\n\t\ttogglePlay() {\n\t\t\tif (this.get('player') && this.get('isPlaying')) {\n\t\t\t\tthis.send('pause');\n\t\t\t} else {\n\t\t\t\tthis.send('play');\n\t\t\t}\n\t\t},\n\t\tmute() {\n\t\t\tif (this.get('player')) {\n\t\t\t\tthis.get('player').mute();\n\t\t\t\tthis.set('isMuted', true);\n\t\t\t}\n\t\t},\n\t\tunMute() {\n\t\t\tif (this.get('player')) {\n\t\t\t\tthis.get('player').unMute();\n\t\t\t\tthis.set('isMuted', false);\n\t\t\t}\n\t\t},\n\t\ttoggleVolume() {\n\t\t\tif (this.get('player').isMuted()) {\n\t\t\t\tthis.send('unMute');\n\t\t\t} else {\n\t\t\t\tthis.send('mute');\n\t\t\t}\n\t\t},\n\t\tseekTo(seconds) {\n\t\t\tif (this.get('player')) {\n\t\t\t\tthis.get('player').seekTo(seconds);\n\t\t\t}\n\t\t},\n\t\t// YouTube events.\n\t\tready() {},\n\t\tended() {},\n\t\tplaying() {\n\t\t\tthis.startTimer();\n\t\t},\n\t\tpaused() {\n\t\t\tthis.stopTimer();\n\t\t},\n\t\tbuffering() {},\n\t\tqueued() {}\n\t}\n});\n","/home/travis/build/npmtest/node-npmtest-ember-youtube/node_modules/ember-youtube/app/components/ember-youtube.js":"import EmberYoutube from 'ember-youtube/components/ember-youtube';\n\nexport default EmberYoutube;\n"}